import { PaymentType } from "src/asserts/enum/payment-type.enum";
import { VoucherTypeEnum } from "../enum/voucher-type-enum";
import { PaymentStatus } from "src/product/dto/payment-status.enum";
import { ProductType } from "src/product/dto/product-type.enum";
import { DebitORCreditEnum } from "../entity/voucher.entity";
import { ProductDetailDto } from "./voucher.dto";
export declare class VoucherResDto {
    id: number;
    name: string;
    quantity?: number;
    branchId: number;
    branchName: string;
    purpose: string;
    creditAmount: number;
    paymentType: PaymentType;
    clientId: string;
    clientName: string;
    staffId: string;
    staffName: string;
    toAccountId: string;
    toAccount: string;
    fromAccountId: string;
    fromAccount: string;
    voucherType: VoucherTypeEnum;
    generationDate?: Date;
    expireDate?: Date;
    shippingAddress?: string;
    buildingAddress?: string;
    remainingAmount?: number;
    hsnCode?: string;
    GSTORTDS?: DebitORCreditEnum;
    SCST?: number;
    CGST?: number;
    amount?: number;
    subDealerId?: number;
    subDealerName?: string;
    vendorId?: number;
    vendorName?: string;
    voucherId: string;
    companyCode: string;
    unitCode: string;
    paymentStatus: PaymentStatus;
    productType: ProductType;
    product?: number;
    productName?: string;
    upiId?: string;
    checkNumber?: string;
    cardNumber?: string;
    invoice?: number;
    invoiceId?: string;
    paymentTo?: string;
    receiptPdfUrl?: string;
    dueDate: Date;
    productDetails?: ProductDetailDto[];
    constructor(id: number, name: string, branchId: number, branchName: string, purpose: string, creditAmount: number, paymentType: PaymentType, clientId: string, clientName: string, staffId: string, staffName: string, toAccount: string, fromAccount: string, voucherType: VoucherTypeEnum, voucherId: string, companyCode: string, unitCode: string, paymentStatus: PaymentStatus, productType: ProductType, vendorId: number, vendorName: string, quantity?: number, generationDate?: Date, expireDate?: Date, shippingAddress?: string, buildingAddress?: string, remainingAmount?: number, hsnCode?: string, GSTORTDS?: DebitORCreditEnum, SCST?: number, CGST?: number, amount?: number, subDealerId?: number, subDealerName?: string, upiId?: string, checkNumber?: string, cardNumber?: string, fromAccountId?: string, toAccountId?: string, product?: number, productName?: string, invoice?: number, invoiceId?: string, paymentTo?: string, receiptPdfUrl?: string, dueDate?: Date, productDetails?: ProductDetailDto[]);
}
