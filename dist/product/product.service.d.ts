import { CommonResponse } from 'src/models/common-response';
import { ProductRepository } from './repo/product.repo';
import { ProductEntity } from './entity/product.entity';
import { VendorRepository } from 'src/vendor/repo/vendor.repo';
import { VoucherRepository } from 'src/voucher/repo/voucher.repo';
import { ProductDto } from './dto/product.dto';
import { ProductIdDto } from './dto/product.id.dto';
import { DataSource } from "typeorm";
import { CommonReq } from 'src/models/common-req';
import { ProductTypeRepository } from 'src/product-type/repo/product-type.repo';
import { BranchRepository } from 'src/branch/repo/branch.repo';
import { StaffRepository } from 'src/staff/repo/staff-repo';
import { SubDealerRepository } from 'src/sub-dealer/repo/sub-dealer.repo';
export declare class ProductService {
    private readonly productRepository;
    private readonly vendorRepository;
    private readonly voucherRepository;
    private dataSource;
    private readonly productTypeRepo;
    private readonly branchRepo;
    private readonly staffRepo;
    private readonly subDalerRepo;
    private storage;
    private bucketName;
    constructor(productRepository: ProductRepository, vendorRepository: VendorRepository, voucherRepository: VoucherRepository, dataSource: DataSource, productTypeRepo: ProductTypeRepository, branchRepo: BranchRepository, staffRepo: StaffRepository, subDalerRepo: SubDealerRepository);
    bulkUploadProducts(file: Express.Multer.File, subDealerId?: number, staffId?: number, branchId?: number, assignTime?: Date): Promise<any[]>;
    handleProductData(productDto: ProductDto): Promise<ProductEntity>;
    private generateVendorId;
    createOrUpdateProduct(productDto: ProductDto, file: Express.Multer.File): Promise<CommonResponse>;
    deleteProductDetails(dto: ProductIdDto): Promise<CommonResponse>;
    getproductDetails(req: ProductIdDto): Promise<CommonResponse>;
    getAllproductDetails(req: CommonReq): Promise<CommonResponse>;
    getDetailProduct(req: CommonReq): Promise<CommonResponse>;
    getSearchDetailProduct(req: ProductIdDto): Promise<CommonResponse>;
    getProductNamesDropDown(): Promise<CommonResponse>;
    productAssignDetails(req: {
        branchName?: string;
        subDealerId?: string;
        companyCode?: string;
        unitCode?: string;
    }): Promise<CommonResponse>;
}
